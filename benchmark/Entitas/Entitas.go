//////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2021 Vladislav Fedotov (Falldot)
// License: MIT License
// MIT License web page: https://opensource.org/licenses/MIT
//
//////////////////////////////////////////////////////////////////////////
//
// This file generated by Entitas-Go generator. PLEASE DO NOT EDIT IT.
//
// Entitas-Go: github.com/Falldot/Entitas-Go
//
//////////////////////////////////////////////////////////////////////////
package ecs

const EntitasComponentTotal = 4

const (
	EUIDesign = iota
ETransform2D
EPhysics2D
EScript //next
)
// odin3d_benchmark



type EUIDesignComponent struct {
	Name   string
	Flags  uint64
}

type ETransform2DComponent struct {
	X, Y float32
	Rotation float32
}

type EPhysics2DComponent struct {
	Accelx, Accely, Velx, Vely float32
	AngularAccel, Torque float32
}

type EScriptComponent struct {
	Handle int
}


func (e *Entity) AddEUIDesign(name string,flags uint64) {
	var c *EUIDesignComponent
	if comp, ok := e.Create(EUIDesign); ok {
		c = comp.(*EUIDesignComponent)
	} else {
		c = new(EUIDesignComponent)
	}
	c.Name = name
c.Flags = flags

	e.components[EUIDesign] = c
	e.onComponentAdd.Execute(e, EUIDesign, c)
}

func (e *Entity) ReplaceEUIDesign(name string,flags uint64) {
	if e.components[EUIDesign] != nil {
		c := e.components[EUIDesign].(*EUIDesignComponent)
		c.Name = name
c.Flags = flags

		e.onComponentReplace.Execute(e, EUIDesign, c)
	} else {
		e.AddEUIDesign(name,flags)
	}
}

func (e *Entity) OnEUIDesign() {
	e.onComponentAdd.Execute(e, EUIDesign, e.components[EUIDesign])
}

func (e *Entity) OffEUIDesign() {
	e.onComponentOff.Execute(e, EUIDesign, e.components[EUIDesign])
}

func (e *Entity) RemoveEUIDesign() {
	e.onComponentRemove.Execute(e, EUIDesign, e.components[EUIDesign])
}

func (e *Entity) GetEUIDesign() *EUIDesignComponent {
	return e.components[EUIDesign].(*EUIDesignComponent)
}

func (e *Entity) AddETransform2D(x float32,y float32,rotation float32) {
	var c *ETransform2DComponent
	if comp, ok := e.Create(ETransform2D); ok {
		c = comp.(*ETransform2DComponent)
	} else {
		c = new(ETransform2DComponent)
	}
	c.X = x
c.Y = y
c.Rotation = rotation

	e.components[ETransform2D] = c
	e.onComponentAdd.Execute(e, ETransform2D, c)
}

func (e *Entity) ReplaceETransform2D(x float32,y float32,rotation float32) {
	if e.components[ETransform2D] != nil {
		c := e.components[ETransform2D].(*ETransform2DComponent)
		c.X = x
c.Y = y
c.Rotation = rotation

		e.onComponentReplace.Execute(e, ETransform2D, c)
	} else {
		e.AddETransform2D(x,y,rotation)
	}
}

func (e *Entity) OnETransform2D() {
	e.onComponentAdd.Execute(e, ETransform2D, e.components[ETransform2D])
}

func (e *Entity) OffETransform2D() {
	e.onComponentOff.Execute(e, ETransform2D, e.components[ETransform2D])
}

func (e *Entity) RemoveETransform2D() {
	e.onComponentRemove.Execute(e, ETransform2D, e.components[ETransform2D])
}

func (e *Entity) GetETransform2D() *ETransform2DComponent {
	return e.components[ETransform2D].(*ETransform2DComponent)
}

func (e *Entity) AddEPhysics2D(accely float32,velx float32,vely float32,angularaccel float32,torque float32,accelx float32) {
	var c *EPhysics2DComponent
	if comp, ok := e.Create(EPhysics2D); ok {
		c = comp.(*EPhysics2DComponent)
	} else {
		c = new(EPhysics2DComponent)
	}
	c.Accely = accely
c.Velx = velx
c.Vely = vely
c.AngularAccel = angularaccel
c.Torque = torque
c.Accelx = accelx

	e.components[EPhysics2D] = c
	e.onComponentAdd.Execute(e, EPhysics2D, c)
}

func (e *Entity) ReplaceEPhysics2D(accely float32,velx float32,vely float32,angularaccel float32,torque float32,accelx float32) {
	if e.components[EPhysics2D] != nil {
		c := e.components[EPhysics2D].(*EPhysics2DComponent)
		c.Accely = accely
c.Velx = velx
c.Vely = vely
c.AngularAccel = angularaccel
c.Torque = torque
c.Accelx = accelx

		e.onComponentReplace.Execute(e, EPhysics2D, c)
	} else {
		e.AddEPhysics2D(accely,velx,vely,angularaccel,torque,accelx)
	}
}

func (e *Entity) OnEPhysics2D() {
	e.onComponentAdd.Execute(e, EPhysics2D, e.components[EPhysics2D])
}

func (e *Entity) OffEPhysics2D() {
	e.onComponentOff.Execute(e, EPhysics2D, e.components[EPhysics2D])
}

func (e *Entity) RemoveEPhysics2D() {
	e.onComponentRemove.Execute(e, EPhysics2D, e.components[EPhysics2D])
}

func (e *Entity) GetEPhysics2D() *EPhysics2DComponent {
	return e.components[EPhysics2D].(*EPhysics2DComponent)
}

func (e *Entity) AddEScript(handle int) {
	var c *EScriptComponent
	if comp, ok := e.Create(EScript); ok {
		c = comp.(*EScriptComponent)
	} else {
		c = new(EScriptComponent)
	}
	c.Handle = handle

	e.components[EScript] = c
	e.onComponentAdd.Execute(e, EScript, c)
}

func (e *Entity) ReplaceEScript(handle int) {
	if e.components[EScript] != nil {
		c := e.components[EScript].(*EScriptComponent)
		c.Handle = handle

		e.onComponentReplace.Execute(e, EScript, c)
	} else {
		e.AddEScript(handle)
	}
}

func (e *Entity) OnEScript() {
	e.onComponentAdd.Execute(e, EScript, e.components[EScript])
}

func (e *Entity) OffEScript() {
	e.onComponentOff.Execute(e, EScript, e.components[EScript])
}

func (e *Entity) RemoveEScript() {
	e.onComponentRemove.Execute(e, EScript, e.components[EScript])
}

func (e *Entity) GetEScript() *EScriptComponent {
	return e.components[EScript].(*EScriptComponent)
}
